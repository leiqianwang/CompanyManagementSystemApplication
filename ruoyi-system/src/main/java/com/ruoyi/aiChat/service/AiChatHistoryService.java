package com.ruoyi.aiChat.service;

import com.ruoyi.aiChat.domain.AiChatMessage;
import com.ruoyi.aiChat.domain.ChatSessionEntity;
import com.ruoyi.aiChat.domain.MessageRole;
import com.ruoyi.aiChat.dto.ChatSessionDto;
import com.ruoyi.aiChat.repository.AiChatSessionRepository;
import com.ruoyi.aiChat.repository.AiChatMessageRepository;

import dev.langchain4j.data.message.ChatMessage;
import dev.langchain4j.data.message.UserMessage;
import dev.langchain4j.data.message.AiMessage;
import dev.langchain4j.data.message.SystemMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;


//      * 修改嵌入模型资源



@Service
public class AiChatHistoryService {


    @Autowired
    private final AiChatMessageRepository aiChatMessageRepository;
    private final AiChatSessionRepository aiChatSessionRepository;

    public AiChatHistoryService(AiChatMessageRepository aiChatMessageRepository, AiChatSessionRepository aiChatSessionRepository) {
        this.aiChatMessageRepository = aiChatMessageRepository;
        this.aiChatSessionRepository = aiChatSessionRepository;
    }


  // 内存存储聊天会话和消息历史 (生产环境应使用数据库)
     // private final Map<String, ChatSessionDto> sessions = new ConcurrentHashMap<>();
   //  private final Map<String, List<ChatMessage>> conversationHistory = new ConcurrentHashMap<>();
    // 添加其他方法来处理聊天历史记录的存储和检索


   public Boolean clearSessionHistory(Long sessionId) {
          // 使用会话Repository查找会话实体
          ChatSessionEntity chatSessionEntity = aiChatSessionRepository.findBySessionId(sessionId);
          if(chatSessionEntity != null){
            // 删除该会话下的所有消息
            aiChatMessageRepository.deleteBySessionId(sessionId);
            // 同步更新会话信息
            chatSessionEntity.setMessageCount(0);
            chatSessionEntity.setLastMessageContent("");
            aiChatSessionRepository.save(chatSessionEntity);
            return true; // 成功清除会话历史
          }
          return false; // 会话不存在，无��清除历史
   }

   public List<ChatMessage> getChatHistory(Long sessionId) {
        // 从数据库或其他存储中获取聊天历史记录
     // First, before converting  List<aiChatMessage> to List<ChatMessage>, we need to ensure that the aiChatMessageRepository is properly set up to fetch messages.
        List<AiChatMessage> dbMessages = aiChatMessageRepository.findBySessionId(sessionId);
        //Then we declare a new ArrayList to store the converted messages
       List<ChatMessage> chatMessages = new ArrayList<>();
       for(AiChatMessage message : dbMessages){

         //Now we need to check if the messages sent by user or generated by AI
         if(MessageRole.USER.equals(message.getRole())) {
            // If the message is from the user, we create a UserMessage object
            chatMessages.add(new UserMessage(message.getContent()));
         } else if(MessageRole.AI.equals(message.getRole())) {
            // If the message is from AI, we create an AiMessage object
            chatMessages.add(new AiMessage(message.getContent()));
         } else if(MessageRole.SYSTEM.equals(message.getRole())) {
            // If the message is from system, we create a SystemMessage object
            chatMessages.add(new SystemMessage(message.getContent()));
         }
       }

       return chatMessages;
    }

    public void saveChatMessage(AiChatMessage message) {
        // 保存聊天消息到数据库


        aiChatMessageRepository.save(message);
    }

    public void deleteChatHistory(Long sessionId) {
        // 删除指定会话的聊天历史记录
        aiChatMessageRepository.deleteBySessionId(sessionId);
    }

    public void deleteChatHistoryByUser(String username) {
        // 删除指定用户的所有聊天历史记录
        List<AiChatMessage> messages = aiChatMessageRepository.findByUsername(username);
        for (AiChatMessage message : messages) {
            aiChatMessageRepository.delete(message);
        }
    }

}
